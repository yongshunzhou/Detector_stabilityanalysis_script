#include "services_dune.fcl"
#include "hitfindermodules_dune.fcl"
#include "filters.fcl"
#include "signalservices_dune.fcl"
#include "caldata_dune.fcl"
#include "trackfindermodules_dune.fcl"
#include "ecalibration.fcl"
#include "triggeralgo_service.fcl"
#include "photpropservices_dune.fcl"
#include "ProtoDUNEFembFilter.fcl"


process_name: Stabilitydet

services:
{
  #Load the service that manages root files for histograms.
  TFileService: { fileName: "stabilitydet.root" }
  TimeTracker: {}
  MemoryTracker: {}
  RandomNumberGenerator: {}                     #ART native random number generator
  @table::protodune_services
  message:      @local::standard_info
  FileCatalogMetadata: @local::art_file_catalog_mc
}

#source is now a root file
source:
{
  module_type: RootInput
  maxEvents:  -1            # Number of events to create
}

outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "stabilitydet.root"    #default file name, can override from command line with -o or --output
   dataTier: "reconstructed"
   fastCloning: false
 } 
}

physics:
{
 producers:{}
 filters:  {} 
 analyzers:{
   stabilitydet:
   {
   module_type: "StabilityDet"
 }
 }
 
 
 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 ana:  [ stabilitydet ]
 #ana: []
 
 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 #trigger_paths: [reco] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 #end_paths:     [ stream1, ana ] 
 end_paths:     [  ana ] 
}

# define the list of LArSoft modules to run through the simulate path
 physics.analyzers.stabilitydet.HitsModuleLabel:                 "linecluster"
 physics.analyzers.stabilitydet.GaushitModuleLabel:              "gaushit"
 physics.analyzers.stabilitydet.HitpduneModuleLabel:             "hitpdune"
 physics.analyzers.stabilitydet.PandoraTrackModuleLabel:         "pandoraTrack"
 physics.analyzers.stabilitydet.PmtrackModuleLabel     :         "pmtrack"
 physics.analyzers.stabilitydet.PandoraShowerModuleLabel:        "pandoraShower" #"emshower"
 physics.analyzers.stabilitydet.PandoraVrtxModuleLabel:  	 "pandora"
 physics.analyzers.stabilitydet.PmtrackVrtxModuleLabel: 	 "pmtrack" 
 physics.analyzers.stabilitydet.PandoraPFPFModuleLabel:	         "pandora"
 physics.analyzers.stabilitydet.PmtrackPFPFModuleLabel:          "pmtrack"
 physics.analyzers.stabilitydet.OpflashIntModuleLabel:           "opflash"
 physics.analyzers.stabilitydet.OpflashExtModuleLabel:           "opflashExternal"

physics.analyzers.michelstudydata.SaveTrackInfo: true
#services.SpaceCharge.EnableSimSpatialSCE: true
#services.SpaceCharge.EnableCorrSCE: true
#services.SpaceCharge.EnableSimEfieldSCE: true
#services.SpaceCharge.EnableSimulationSCE: true
